{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/gridstack-dd.ts","webpack://GridStack/./src/gridstack-ddi.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/h5/dd-base-impl.ts","webpack://GridStack/./src/h5/dd-draggable.ts","webpack://GridStack/./src/h5/dd-droppable.ts","webpack://GridStack/./src/h5/dd-element.ts","webpack://GridStack/./src/h5/dd-manager.ts","webpack://GridStack/./src/h5/dd-resizable-handle.ts","webpack://GridStack/./src/h5/dd-resizable.ts","webpack://GridStack/./src/h5/dd-utils.ts","webpack://GridStack/./src/h5/gridstack-dd-native.ts","webpack://GridStack/./src/index-h5.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","GridStackDD","GridStackDDI","get","el","this","draggable","resizable","gridstackNode","_initDD","GridStack","prototype","_setupAcceptWidget","opts","staticGrid","acceptWidgets","droppable","accept","grid","onDrag","event","node","pos","getCellFromPixel","left","pageX","top","pageY","x","Math","max","y","_added","engine","canMoveNode","moveNode","_updateContainerHeight","autoPosition","willItFit","cleanNodes","beginUpdate","addNode","_writePosAttr","placeholder","w","h","appendChild","_beforeDragX","_beforeDragY","canAccept","selector","matches","maxRow","n","minW","minH","on","_readAttr","round","offsetWidth","cellWidth","offsetHeight","getCellHeight","newNode","prepareNode","_temporary","_isOutOfGrid","_gridstackNodeOrig","off","removeNode","parentNode","remove","helper","wasAdded","parentElement","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","_id","cleanupNode","cloneNode","Utils","removePositioningStyles","_writeAttr","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","type","undefined","window","setTimeout","_prepareDragDropByNode","_setupRemoveDrop","removable","trashEl","document","querySelector","isDroppable","removableOptions","dataset","inTrashZone","_setupRemovingTimeout","_clearRemovingTimeout","_removeTimeout","classList","add","_isAboutToRemove","removeTimeout","clearTimeout","_setupDragIn","dragIn","isDraggable","dragInOptions","cellHeight","locked","noMove","disableDrag","noResize","disableResize","onStartMoving","ui","target","append","_prevYPix","position","maxW","maxH","dragOrResize","resizing","distance","updateScrollPosition","isOutside","_temporaryRemoved","_lastTriedX","_lastTriedY","updateScrollResize","size","width","height","_lastTriedW","_lastTriedH","subGrid","onParentResize","onEndMoving","gridToNotify","start","stop","drag","resize","movable","els","val","getElements","forEach","disable","enableMove","enableResize","_triggerEvent","enable","doEnable","includeNewWidgets","getGridItems","pluginClass","ddi","registerPlugin","GridStackEngine","getGridHeight","obsolete","getRow","column","onChange","_float","float","nodes","batchMode","_prevFloat","_packNodes","_notify","_sortNodes","nn","hasLocked","Boolean","find","moved","collisionNode","collide","area","isIntercepted","length","batchUpdate","copyNodes","_dirty","commit","dir","sort","i","_updating","_packY","newY","box","slice","bn","canBeMoved","_idSeq","defaults","Number","isNaN","min","verify","dirtNodes","_origY","_origX","_origW","_origH","filter","removeDOM","dirtyNodes","Array","isArray","concat","getDirtyNodes","triggerAddEvent","floor","_fixCollisions","triggerEvent","_layouts","isNodeChangedPosition","clonedNode","some","clone","map","canMove","row","noPack","reduce","memo","saveElement","widgets","key","_ignoreLayoutsNodeChange","layout","l","ratio","oldColumn","cacheLayout","cacheNodes","lastIndex","cacheNode","j","findIndex","newNodes","splice","move","scale","clear","copy","prop","GridDefaults","minRow","itemClass","placeholderClass","placeholderText","handle","handleClass","styleInHead","cellHeightThrottle","margin","auto","minWidth","animate","alwaysShowResizeHandle","autoHide","handles","scroll","appendTo","revert","rtl","marginUnit","cellHeightUnit","disableOneColumnMode","oneColumnModeDomSort","obsoleteOpts","obsoleteAttr","rowAttr","toNumber","getAttribute","toBool","_styleSheetClass","random","toFixed","initMargin","_widthOrContainer","_prevColumn","style","direction","parentGridItemEl","closestByClass","_isNested","_isAutoCellHeight","_setStaticClass","cbNodes","removeChild","_updateStyles","elements","parseInt","e","_prepareElement","saveInitial","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","parent","opt","doc","implementation","createHTMLDocument","body","innerHTML","class","children","init","load","_placeholder","placeholderChild","createElement","className","arguments","warn","a","id","addWidget","content","domAttr","_insertNotAppend","prepend","saveContent","saveGridOpt","list","save","sub","o","marginBottom","marginTop","marginRight","marginLeft","removeInternalAndSame","addAndRemove","items","removed","removeWidget","item","update","addGrid","forcePixel","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","compact","domNodes","updateNodeWidths","from","setStatic","removeAll","_removeStylesheet","useDocRelative","containerPos","getBoundingClientRect","documentElement","scrollTop","offsetTop","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","isAreaEmpty","getElement","name","callback","indexOf","split","noData","detail","addEventListener","log","removeEventListener","doAnimate","m","keys","k","changed","ddChanged","value","layoutsNodesChange","CustomEvent","bubbles","Event","dispatchEvent","_styles","removeStylesheet","forceUpdate","prefix","styleLocation","createStylesheet","_max","addCSSRule","bottom","right","getHeight","rows","cssMinHeight","getComputedStyle","setAttribute","String","removeProperty","same","attrs","resizeHandles","removeAttribute","hasOwnProperty","classes","oneColumn","changedOneColumn","_oneColumnMode","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","bind","margins","Engine","_disabled","_eventRegister","eventName","disabled","DDDraggable","DDBaseImplement","option","super","dragging","containmentRect","offset","substring","dragEl","contains","_dragStart","_drag","_dragEnd","_dragFollow","forDestroy","destroy","Object","DDManager","dragElement","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","ev","DDUtils","initEvent","_setupDragFollowNodeNotifyStart","dragFollowTimer","_cancelDragGhost","_setupHelperStyle","dragEventListenerOption","preventDefault","paintTimer","cancelAnimationFrame","parentOriginStylePosition","_removeHelperStyle","apply","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","basePosition","zIndex","requestAnimationFrame","clientX","clientY","match","img","dataTransfer","setDragImage","stopPropagation","xformOffsetX","xformOffsetY","testEl","addElStyles","opacity","testElPosition","targetOffset","DDDroppable","_dragEnter","_dragOver","_dragLeave","_drop","_setupAccept","moving","_removeLeaveCallbacks","_canDrop","over","_ui","relatedTarget","out","drop","DDElement","ddElement","ddDraggable","ddDroppable","ddResizable","updateOption","DDResizable","DDResizableHandle","host","_mouseDown","_mouseMove","_mouseUp","_init","userSelect","mouseDownEvent","s","abs","_showHandlers","_hideHandlers","newRect","originalRect","scrolled","rect","temporalRect","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","handlerDirection","handlers","trim","_resizeStart","_resizeStop","_resizing","scrollEl","getScrollParent","scrollY","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","oEvent","offsetX","offsetY","reshape","_getReShapeSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","maxHeight","minHeight","containmentEl","test","styles","info","evt","obj","button","which","buttons","cancelable","p","isEventSupportPassiveOption","supportsPassive","passiveTest","GridStackDDNative","_getDDElements","dEl","cleanResizable","setupResizable","cleanDraggable","setupDraggable","containment","dragOut","_accept","cleanDroppable","setupDroppable","create","hosts","d","f","oldName","newName","rev","wrapper","args","oldAttr","querySelectorAll","getElementById","b","widths","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","toLowerCase","Error","parseFloat","sources","source","func","delay","isWaiting","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","scrollBy","behavior","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"gridstack-h5.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","// gridstack-GridStackDD.get().ts 3.3.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { GridStackDDI } from './gridstack-ddi';\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt } from './types';\r\nimport { GridStack } from './gridstack';\r\nimport { Utils } from './utils';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n/**\r\n * Base class implementing common Grid drag'n'drop functionality, with domain specific subclass (h5 vs jq subclasses)\r\n */\r\nexport abstract class GridStackDD extends GridStackDDI {\r\n\r\n  /** override to cast to correct type */\r\n  static get(): GridStackDD {\r\n    return GridStackDDI.get() as GridStackDD;\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDD {\r\n    this.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // APIs that must be implemented by subclasses to do actual darg/drop/resize called by GridStack code below\r\n\r\n  public abstract resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isResizable(el: HTMLElement): boolean;\r\n\r\n  public abstract draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDD;\r\n\r\n  public abstract isDraggable(el: HTMLElement): boolean;\r\n\r\n  public abstract droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDD;\r\n\r\n  public abstract isDroppable(el: HTMLElement): boolean;\r\n\r\n  public abstract on(el: GridItemHTMLElement, eventName: string, callback: DDCallback): GridStackDD;\r\n\r\n  public abstract off(el: GridItemHTMLElement, eventName: string): GridStackDD;\r\n}\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 10k.\r\n * TODO: no code hint in code below as this is <any> so look at alternatives ?\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over support to support widgets */\r\nGridStack.prototype._setupAcceptWidget = function(): GridStack {\r\n  if (this.opts.staticGrid) return this;\r\n\r\n  // if we don't accept external widgets (default) we still need to accept dragging within our\r\n  // list of items (else we get a no-drop icon on windows)\r\n  if (!this.opts.acceptWidgets) {\r\n    GridStackDD.get().droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => el.gridstackNode && el.gridstackNode.grid === this\r\n    })\r\n    return this;\r\n  }\r\n\r\n  let onDrag = (event, el: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    let pos = this.getCellFromPixel({left: event.pageX, top: event.pageY}, true);\r\n    let x = Math.max(0, pos.x);\r\n    let y = Math.max(0, pos.y);\r\n    if (!node._added) {\r\n      node.x = x;\r\n      node.y = y;\r\n      delete node.autoPosition;\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) return; // full grid or can't grow\r\n      }\r\n      node._added = true;\r\n\r\n      node.el = el;\r\n      this.engine.cleanNodes();\r\n      this.engine.beginUpdate(node);\r\n      this.engine.addNode(node);\r\n\r\n      this._writePosAttr(this.placeholder, node.x, node.y, node.w, node.h);\r\n      this.el.appendChild(this.placeholder);\r\n      node.el = this.placeholder; // dom we update while dragging...\r\n      node._beforeDragX = node.x;\r\n      node._beforeDragY = node.y;\r\n\r\n      this._updateContainerHeight();\r\n    } else if ((x !== node.x || y !== node.y) && this.engine.canMoveNode(node, x, y)) {\r\n      this.engine.moveNode(node, x, y);\r\n      this._updateContainerHeight();\r\n    }\r\n  };\r\n\r\n  GridStackDD.get()\r\n    .droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node && node.grid === this) return true;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    .on(this.el, 'dropover', (event, el: GridItemHTMLElement) => {\r\n      // ignore drop enter on ourself, and prevent parent from receiving event\r\n      let node = el.gridstackNode;\r\n      if (node && node.grid === this) {\r\n        delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false;\r\n      }\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {\r\n        node = this._readAttr(el);\r\n      }\r\n\r\n      // if the item came from another grid, let it know it was added here to removed duplicate shadow #393\r\n      if (node.grid && node.grid !== this) {\r\n        node._added = true;\r\n      }\r\n\r\n      // if not calculate the grid size based on element outer size\r\n      let w = node.w || Math.round(el.offsetWidth / this.cellWidth()) || 1;\r\n      let h = node.h || Math.round(el.offsetHeight / this.getCellHeight(true)) || 1;\r\n\r\n      // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n      let newNode = this.engine.prepareNode({...node, ...{w, h, _added: false, _temporary: true}});\r\n      newNode._isOutOfGrid = true;\r\n      el.gridstackNode = newNode;\r\n      el._gridstackNodeOrig = node;\r\n\r\n      GridStackDD.get().on(el, 'drag', onDrag);\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      // clear any added flag now that we are leaving #1484\r\n      delete node._added;\r\n\r\n      // jquery-ui bug. Must verify widget is being dropped out\r\n      // check node variable that gets set when widget is out of grid\r\n      if (!node._isOutOfGrid) {\r\n        return;\r\n      }\r\n\r\n      GridStackDD.get().off(el, 'drag');\r\n      node.el = null;\r\n      this.engine.removeNode(node);\r\n      if (this.placeholder.parentNode === this.el) {\r\n        this.placeholder.remove();\r\n      }\r\n      this._updateContainerHeight();\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      // ignore drop on ourself from ourself - dragend will handle the simple move instead\r\n      if (node && node.grid === this) return false;\r\n\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode && origNode.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.placeholder.remove();\r\n        origNode.el = el; // was using placeholder, have it point to node we've moved instead\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        const _id = node._id;\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values (including the _id so add that back)\r\n        node._id = _id;\r\n        node.grid = this;\r\n      }\r\n      GridStackDD.get().off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jqueryui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        GridStackDD.get().remove(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n\r\n      Utils.removePositioningStyles(el);\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      // IFF we are still there (some application will use as placeholder and insert their real widget instead)\r\n      window.setTimeout(() => {\r\n        if (node.el && node.el.parentElement) this._prepareDragDropByNode(node);\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE dropover/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!GridStackDD.get().isDroppable(trashEl)) {\r\n      GridStackDD.get().droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', function(event, el) { // don't use => notation to avoid using 'this' as grid by mistake...\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          el.dataset.inTrashZone = 'true';\r\n          node.grid._setupRemovingTimeout(el);\r\n        })\r\n        .on(trashEl, 'dropout', function(event, el) { // same\r\n          let node = el.gridstackNode;\r\n          if (!node || !node.grid) return;\r\n          delete el.dataset.inTrashZone;\r\n          node.grid._clearRemovingTimeout(el);\r\n        });\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/** @internal */\r\nGridStack.prototype._setupRemovingTimeout = function(el: GridItemHTMLElement): GridStack {\r\n  let node = el.gridstackNode;\r\n  if (!node || node._removeTimeout || !this.opts.removable) return this;\r\n  node._removeTimeout = window.setTimeout(() => {\r\n    el.classList.add('grid-stack-item-removing');\r\n    node._isAboutToRemove = true;\r\n  }, this.opts.removeTimeout);\r\n  return this;\r\n}\r\n\r\n/** @internal */\r\nGridStack.prototype._clearRemovingTimeout = function(el: GridItemHTMLElement): GridStack {\r\n  let node = el.gridstackNode;\r\n  if (!node || !node._removeTimeout) return this;\r\n  clearTimeout(node._removeTimeout);\r\n  delete node._removeTimeout;\r\n  el.classList.remove('grid-stack-item-removing');\r\n  delete node._isAboutToRemove;\r\n  return this;\r\n}\r\n\r\n/** @internal call to setup dragging in from the outside (say toolbar), with options */\r\nGridStack.prototype._setupDragIn = function():  GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.dragIn === 'string') {\r\n    if (!GridStackDD.get().isDraggable(this.opts.dragIn)) {\r\n      GridStackDD.get().dragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || node.locked ||\r\n    ((node.noMove || this.opts.disableDrag) && (node.noResize || this.opts.disableResize))) {\r\n    if (node._initDD) {\r\n      GridStackDD.get().remove(node.el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    node.el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n  // check if init already done\r\n  if (node._initDD) {\r\n    // fine tune drag vs move by disabling any part...\r\n    if (node.noMove || this.opts.disableDrag) {\r\n      GridStackDD.get().draggable(el, 'disable');\r\n    }\r\n    if (node.noResize || this.opts.disableResize) {\r\n      GridStackDD.get().resizable(el, 'disable');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // remove our style that look like D&D\r\n  node.el.classList.remove('ui-draggable-disabled', 'ui-resizable-disabled');\r\n\r\n  // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n  let cellWidth: number;\r\n  let cellHeight: number;\r\n\r\n  /** called when item starts moving/resizing */\r\n  let onStartMoving = (event: Event, ui: DDUIData): void => {\r\n    let target = event.target as HTMLElement;\r\n\r\n    // trigger any 'dragstart' / 'resizestart' manually\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n\r\n    this.engine.cleanNodes();\r\n    this.engine.beginUpdate(node);\r\n\r\n    this._writePosAttr(this.placeholder, node.x, node.y, node.w, node.h)\r\n    this.el.append(this.placeholder);\r\n\r\n    node.el = this.placeholder;\r\n    node._beforeDragX = node.x;\r\n    node._beforeDragY = node.y;\r\n    node._prevYPix = ui.position.top;\r\n\r\n    // set the min/max resize info\r\n    cellWidth = this.cellWidth();\r\n    cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n    GridStackDD.get().resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1));\r\n    GridStackDD.get().resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { GridStackDD.get().resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { GridStackDD.get().resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n\r\n  /** called when item is being dragged/resized */\r\n  let dragOrResize = (event: Event, ui: DDUIData): void => {\r\n    let x = Math.round(ui.position.left / cellWidth);\r\n    let y = Math.round(ui.position.top / cellHeight);\r\n    let w: number;\r\n    let h: number;\r\n    let resizing: boolean;\r\n\r\n    if (event.type === 'drag') {\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      Utils.updateScrollPosition(el, ui.position, distance);\r\n      // if inTrash, outside of the bounds or added to another grid (#393) temporarily remove it from us\r\n      if (el.dataset.inTrashZone || node._added || this.engine.isOutside(x, y, node)) {\r\n        if (node._temporaryRemoved) return;\r\n        if (this.opts.removable === true) {\r\n          this._setupRemovingTimeout(el);\r\n        }\r\n\r\n        x = node._beforeDragX;\r\n        y = node._beforeDragY;\r\n\r\n        if (this.placeholder.parentNode === this.el) {\r\n          this.placeholder.remove();\r\n        }\r\n        this.engine.removeNode(node);\r\n        this._updateContainerHeight();\r\n\r\n        node._temporaryRemoved = true;\r\n        delete node._added; // no need for this now\r\n      } else {\r\n        this._clearRemovingTimeout(el);\r\n\r\n        if (node._temporaryRemoved) {\r\n          this.engine.addNode(node);\r\n          this._writePosAttr(this.placeholder, x, y, w, h);\r\n          this.el.appendChild(this.placeholder);\r\n          node.el = this.placeholder;\r\n          delete node._temporaryRemoved;\r\n        }\r\n      }\r\n      if (node._lastTriedX === x && node._lastTriedY === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event as MouseEvent, el, cellHeight);\r\n      w = Math.round(ui.size.width / cellWidth);\r\n      h = Math.round(ui.size.height / cellHeight);\r\n      if (w === node.w && h === node.h) return;\r\n      resizing = true;\r\n    }\r\n\r\n    if (!this.engine.canMoveNode(node, x, y, w, h)) return;\r\n    node._lastTriedX = x;\r\n    node._lastTriedY = y;\r\n    node._lastTriedW = w;\r\n    node._lastTriedH = h;\r\n    this.engine.moveNode(node, x, y, w, h);\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }\r\n    this._updateContainerHeight();\r\n  }\r\n\r\n  /** called when the item stops moving/resizing */\r\n  let onEndMoving = (event: Event): void => {\r\n    if (this.placeholder.parentNode === this.el) {\r\n      this.placeholder.remove();\r\n    }\r\n\r\n    // if the item has moved to another grid, we're done here\r\n    let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n    if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n    node.el = target;\r\n\r\n    if (node._isAboutToRemove) {\r\n      let gridToNotify = el.gridstackNode.grid;\r\n      if (gridToNotify._gsEventHandler[event.type]) {\r\n        gridToNotify._gsEventHandler[event.type](event, target);\r\n      }\r\n      gridToNotify.engine.removedNodes.push(node);\r\n      GridStackDD.get().remove(el);\r\n      delete el.gridstackNode; // hint we're removing it next and break circular link\r\n      gridToNotify._triggerRemoveEvent();\r\n      if (el.parentElement) {\r\n        el.remove(); // finally remove it\r\n      }\r\n    } else {\r\n      this._clearRemovingTimeout(el);\r\n      if (!node._temporaryRemoved) {\r\n        Utils.removePositioningStyles(target);\r\n        this._writePosAttr(target, node.x, node.y, node.w, node.h);\r\n      } else {\r\n        Utils.removePositioningStyles(target);\r\n        this._writePosAttr(target, node._beforeDragX, node._beforeDragY, node.w, node.h);\r\n        node.x = node._beforeDragX;\r\n        node.y = node._beforeDragY;\r\n        delete node._temporaryRemoved;\r\n        this.engine.addNode(node);\r\n      }\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n\r\n    this.engine.endUpdate();\r\n\r\n    /* doing it on live resize instead\r\n    // if we re-sized a nested grid item, let the children resize as well\r\n    if (event.type === 'resizestop') {\r\n      if (target.gridstackNode.subGrid) {(target.gridstackNode.subGrid as GridStack).onParentResize()}\r\n    }\r\n    */\r\n  }\r\n\r\n  GridStackDD.get()\r\n    .draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    })\r\n    .resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n  node._initDD = true; // we've set DD support now\r\n\r\n  // finally fine tune drag vs move by disabling any part...\r\n  if (node.noMove || this.opts.disableDrag) {\r\n    GridStackDD.get().draggable(el, 'disable');\r\n  }\r\n  if (node.noResize || this.opts.disableResize) {\r\n    GridStackDD.get().resizable(el, 'disable');\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) return;\r\n    node.noMove = !(val || false);\r\n    if (node.noMove) {\r\n      GridStackDD.get().draggable(el, 'disable');\r\n      el.classList.remove('ui-draggable-handle');\r\n    } else {\r\n      this._prepareDragDropByNode(node); // init DD if need be\r\n      GridStackDD.get().draggable(el, 'enable');\r\n      el.classList.remove('ui-draggable-handle');\r\n    }\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node || node.locked) return;\r\n    node.noResize = !(val || false);\r\n    if (node.noResize) {\r\n      GridStackDD.get().resizable(el, 'disable');\r\n    } else {\r\n      this._prepareDragDropByNode(node); // init DD if need be\r\n      GridStackDD.get().resizable(el, 'enable');\r\n    }\r\n  });\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Enables/disables widget moving. No-op for static grids.\r\n  *\r\n  * @param doEnable\r\n  * @param includeNewWidgets will force new widgets to be draggable as per\r\n  * doEnable`s value by changing the disableDrag grid option (default: true).\r\n  */\r\nGridStack.prototype.enableMove = function(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.getGridItems().forEach(el => this.movable(el, doEnable));\r\n  if (includeNewWidgets) {\r\n    this.opts.disableDrag = !doEnable;\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Enables/disables widget resizing. No-op for static grids.\r\n  * @param doEnable\r\n  * @param includeNewWidgets will force new widgets to be draggable as per\r\n  * doEnable`s value by changing the disableResize grid option (default: true).\r\n  */\r\nGridStack.prototype.enableResize = function(doEnable: boolean, includeNewWidgets = true): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.getGridItems().forEach(el => this.resizable(el, doEnable));\r\n  if (includeNewWidgets) {\r\n    this.opts.disableResize = !doEnable;\r\n  }\r\n  return this;\r\n}\r\n","// gridstack-ddi.ts 3.3.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\nimport { GridItemHTMLElement } from './types';\r\n\r\n/**\r\n * Abstract Partial Interface API for drag'n'drop plugin - look at GridStackDD and HTML5 / Jquery implementation versions\r\n */\r\nexport class GridStackDDI {\r\n\r\n  protected static ddi: GridStackDDI;\r\n\r\n  /** call this method to register your plugin instead of the default no-op one */\r\n  static registerPlugin(pluginClass: typeof GridStackDDI): GridStackDDI {\r\n    GridStackDDI.ddi = new pluginClass();\r\n    return GridStackDDI.ddi;\r\n  }\r\n\r\n  /** get the current registered plugin to use */\r\n  static get(): GridStackDDI {\r\n    return GridStackDDI.ddi || GridStackDDI.registerPlugin(GridStackDDI);\r\n  }\r\n\r\n  /** removes any drag&drop present (called during destroy) */\r\n  public remove(el: GridItemHTMLElement): GridStackDDI {\r\n    return this; // no-op for static grids\r\n  }\r\n}\r\n","// gridstack-engine.ts 3.3.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { Utils, obsolete } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackWidget } from './types';\r\n\r\nexport type onChangeCB = (nodes: GridStackNode[], removeDOM?: boolean) => void;\r\n\r\n/** options used for creations - similar to GridStackOptions */\r\nexport interface GridStackEngineOptions {\r\n  column?: number;\r\n  maxRow?: number;\r\n  float?: boolean;\r\n  nodes?: GridStackNode[];\r\n  onChange?: onChangeCB;\r\n}\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public onChange: onChangeCB;\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal */\r\n  private _float: boolean;\r\n  /** @internal */\r\n  private _prevFloat: boolean;\r\n  /** @internal */\r\n  private _layouts?: Layout[][]; // maps column # to array of values nodes\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  private static _idSeq = 1;\r\n\r\n  public constructor(opts: GridStackEngineOptions = {}) {\r\n    this.column = opts.column || 12;\r\n    this.onChange = opts.onChange;\r\n    this._float = opts.float;\r\n    this.maxRow = opts.maxRow;\r\n    this.nodes = opts.nodes || [];\r\n  }\r\n\r\n  public batchUpdate(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.batchMode = true;\r\n    this._prevFloat = this._float;\r\n    this._float = true; // let things go anywhere for now... commit() will restore and possibly reposition\r\n    return this;\r\n  }\r\n\r\n  public commit(): GridStackEngine {\r\n    if (!this.batchMode) return this;\r\n    this.batchMode = false;\r\n    this._float = this._prevFloat;\r\n    delete this._prevFloat;\r\n    this._packNodes();\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _fixCollisions(node: GridStackNode): GridStackEngine {\r\n    this._sortNodes(-1);\r\n\r\n    let nn = node;\r\n    let hasLocked = Boolean(this.nodes.find(n => n.locked));\r\n    if (!this.float && !hasLocked) {\r\n      nn = {x: 0, y: node.y, w: this.column, h: node.h};\r\n    }\r\n    while (true) {\r\n      let collisionNode = this.collide(node, nn);\r\n      if (!collisionNode) return this;\r\n      let moved;\r\n      if (collisionNode.locked) {\r\n        // if colliding with a locked item, move ourself instead\r\n        moved = this.moveNode(node, node.x, collisionNode.y + collisionNode.h,\r\n          node.w, node.h, true);\r\n      } else {\r\n        moved = this.moveNode(collisionNode, collisionNode.x, node.y + node.h,\r\n          collisionNode.w, collisionNode.h, true);\r\n      }\r\n      if (!moved) return this; // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n    }\r\n  }\r\n\r\n  /** return any intercepted node with the given area, skipping the passed in node (usually self) */\r\n  public collide(node: GridStackNode, area: GridStackNode = node): GridStackNode {\r\n    return this.nodes.find(n => n !== node && Utils.isIntercepted(n, area));\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    return !this.collide(nn);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) return this;\r\n    this.batchUpdate();\r\n    this._sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.noMove && !node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    });\r\n    this.commit();\r\n    return this;\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) return;\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** @internal */\r\n  private _sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _packNodes(): GridStackEngine {\r\n    this._sortNodes();\r\n\r\n    if (this.float) {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n._updating || n._packY === undefined || n.y === n._packY) {\r\n          return this;\r\n        }\r\n        let newY = n.y;\r\n        while (newY >= n._packY) {\r\n          let box: GridStackWidget = {x: n.x, y: newY, w: n.w, h: n.h};\r\n          let collisionNode = this.nodes.slice(0, i).find(bn => Utils.isIntercepted(box, bn));\r\n          if (!collisionNode) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n          --newY;\r\n        }\r\n      });\r\n    } else {\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) return this;\r\n        while (n.y > 0) {\r\n          let newY = n.y - 1;\r\n          let canBeMoved = i === 0;\r\n          let box: GridStackWidget = {x: n.x, y: newY, w: n.w, h: n.h};\r\n          if (i > 0) {\r\n            let collisionNode = this.nodes.slice(0, i).find(bn => Utils.isIntercepted(box, bn));\r\n            canBeMoved = !collisionNode;\r\n          }\r\n\r\n          if (!canBeMoved) { break; }\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    if (node.w > this.column) {\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original X,Y,W,H (or entire node?) instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      let dirtNodes: GridStackNode[] = [];\r\n      this.nodes.forEach(n => {\r\n        if (n._dirty) {\r\n          if (n.y === n._origY && n.x === n._origX && n.w === n._origW && n.h === n._origH) {\r\n            delete n._dirty;\r\n          } else {\r\n            dirtNodes.push(n);\r\n          }\r\n        }\r\n      });\r\n      return dirtNodes;\r\n    }\r\n\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal */\r\n  private _notify(nodes?: GridStackNode | GridStackNode[], removeDOM = true): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    nodes = (nodes === undefined ? [] : (Array.isArray(nodes) ? nodes : [nodes]) );\r\n    let dirtyNodes = nodes.concat(this.getDirtyNodes());\r\n    if (this.onChange) {\r\n      this.onChange(dirtyNodes, removeDOM);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.nodes.forEach(n => { delete n._dirty; });\r\n    return this;\r\n  }\r\n\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    node = this.prepareNode(node);\r\n\r\n    if (node.autoPosition) {\r\n      this._sortNodes();\r\n\r\n      for (let i = 0;; ++i) {\r\n        let x = i % this.column;\r\n        let y = Math.floor(i / this.column);\r\n        if (x + node.w > this.column) {\r\n          continue;\r\n        }\r\n        let box = {x, y, w: node.w, h: node.h};\r\n        if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\r\n          node.x = x;\r\n          node.y = y;\r\n          delete node.autoPosition; // found our slot\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    if (triggerAddEvent) {\r\n      this.addedNodes.push(node);\r\n    }\r\n\r\n    this._fixCollisions(node);\r\n    this._packNodes();\r\n    this._notify();\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    node._id = null; // hint that node is being removed\r\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n    this.nodes = this.nodes.filter(n => n !== node);\r\n    if (!this.float) {\r\n      this._packNodes();\r\n    }\r\n    this._notify(node, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) return this;\r\n    if (removeDOM) {\r\n      this.nodes.forEach(n => { n._id = null; }); // hint that node is being removed\r\n    }\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    this._notify(this.removedNodes, removeDOM);\r\n    return this;\r\n  }\r\n\r\n  public canMoveNode(node: GridStackNode, x: number, y: number, w?: number, h?: number): boolean {\r\n    if (!this.isNodeChangedPosition(node, x, y, w, h)) {\r\n      return false;\r\n    }\r\n    let hasLocked = this.nodes.some(n => n.locked);\r\n\r\n    if (!this.maxRow && !hasLocked) {\r\n      return true;\r\n    }\r\n\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      })\r\n    });\r\n\r\n    if (!clonedNode) return true;\r\n\r\n    clone.moveNode(clonedNode, x, y, w, h);\r\n\r\n    let canMove = true;\r\n    if (hasLocked) {\r\n      canMove = !clone.nodes.some(n => n.locked && n._dirty && n !== clonedNode);\r\n    }\r\n    if (this.maxRow && canMove) {\r\n      canMove = (clone.getRow() <= this.maxRow);\r\n    }\r\n\r\n    return canMove;\r\n  }\r\n\r\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n  public willItFit(node: GridStackNode): boolean {\r\n    if (!this.maxRow) return true;\r\n\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {return {...n}})\r\n    });\r\n    clone.addNode(node);\r\n    return clone.getRow() <= this.maxRow;\r\n  }\r\n\r\n  /** return true if the passed in node (x,y) is being dragged outside of the grid, and not added to bottom */\r\n  public isOutside(x: number, y: number, node: GridStackNode): boolean {\r\n    // simple outside boundaries\r\n    if (x < 0 || x >= this.column || y < 0) return true;\r\n    if (this.maxRow) return (y >= this.maxRow);\r\n    else if (this.float) return false; // infinite grow with no maxRow\r\n\r\n    // see if dragging PAST bottom (row+1)\r\n    let row = this.getRow();\r\n    if (y < row || y === 0) return false;\r\n    if (y > row) return true;\r\n    // else check to see if we can add that item to the bottom... (y == row)\r\n    if (!node._temporaryRemoved) {\r\n      let clone = new GridStackEngine({\r\n        column: this.column,\r\n        float: this.float,\r\n        nodes: this.nodes.filter(n => n !== node).map(n => {return {...n}})\r\n      });\r\n      let nn = {...node, x, y};\r\n      clone.addNode(nn);\r\n      return nn.y === node.y && nn.x === node.x; // didn't actually move, so last row was a drag out and not a new place...\r\n    }\r\n    return node._temporaryRemoved; // if still outside so we don't flicker back & forth\r\n  }\r\n\r\n  public isNodeChangedPosition(node: GridStackNode, x: number, y: number, w?: number, h?: number): boolean {\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof w !== 'number') { w = node.w; }\r\n    if (typeof h !== 'number') { h = node.h; }\r\n\r\n    if (node.maxW) { w = Math.min(w, node.maxW); }\r\n    if (node.maxH) { h = Math.min(h, node.maxH); }\r\n    if (node.minW) { w = Math.max(w, node.minW); }\r\n    if (node.minH) { h = Math.max(h, node.minH); }\r\n\r\n    if (node.x === x && node.y === y && node.w === w && node.h === h) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public moveNode(node: GridStackNode, x: number, y: number, w?: number, h?: number, noPack?: boolean): GridStackNode {\r\n    if (node.locked) return null;\r\n    if (typeof x !== 'number') { x = node.x; }\r\n    if (typeof y !== 'number') { y = node.y; }\r\n    if (typeof w !== 'number') { w = node.w; }\r\n    if (typeof h !== 'number') { h = node.h; }\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    let resizing = (node.w !== w || node.h !== h);\r\n    let nn: GridStackNode = { x, y, w, h, maxW: node.maxW, maxH: node.maxH, minW: node.minW, minH: node.minH};\r\n    nn = this.prepareNode(nn, resizing);\r\n    if (node.x === nn.x && node.y === nn.y && node.w === nn.w && node.h === nn.h) {\r\n      return null;\r\n    }\r\n\r\n    node._dirty = true;\r\n\r\n    node.x = node._lastTriedX = nn.x;\r\n    node.y = node._lastTriedY = nn.y;\r\n    node.w = node._lastTriedW = nn.w;\r\n    node.h = node._lastTriedH = nn.h;\r\n\r\n    this._fixCollisions(node);\r\n    if (!noPack) {\r\n      this._packNodes();\r\n      this._notify();\r\n    }\r\n    return node;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((memo, n) => Math.max(memo, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (node._updating) return this;\r\n    node._updating = true;\r\n    this.nodes.forEach(n => { n._packY = n.y; });\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      this.nodes.forEach(n => { delete n._packY; });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves the current layout returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    let widgets: GridStackNode[] = [];\r\n    Utils.sort(this.nodes);\r\n    this.nodes.forEach(n => {\r\n      let w: GridStackNode = {};\r\n      for (let key in n) { if (key[0] !== '_' && n[key] !== null && n[key] !== undefined ) w[key] = n[key]; }\r\n      // delete other internals\r\n      if (!saveElement) delete w.el;\r\n      delete w.grid;\r\n      // delete default values (will be re-created on read)\r\n      if (!w.autoPosition) delete w.autoPosition;\r\n      if (!w.noResize) delete w.noResize;\r\n      if (!w.noMove) delete w.noMove;\r\n      if (!w.locked) delete w.locked;\r\n      widgets.push(w);\r\n    });\r\n    return widgets;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._ignoreLayoutsNodeChange) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // Note: we don't need to check against out of bound scaling/moving as that will be done when using those cache values.\r\n        nodes.forEach(node => {\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return this; // no cache for new nodes. Will use those values.\r\n          let ratio = column / this.column;\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._origY) {\r\n            n.y += (node.y - node._origY);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._origX) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._origW) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param oldColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(oldColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || oldColumn === column) return this;\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, oldColumn);\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    if (column === 1 && nodes && nodes.length) {\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, oldColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout.\r\n    let cacheNodes = this._layouts[column] || [];\r\n    // if not AND we are going up in size start with the largest layout as down-scaling is more accurate\r\n    let lastIndex = this._layouts.length - 1;\r\n    if (cacheNodes.length === 0 && column > oldColumn && column < lastIndex) {\r\n      cacheNodes = this._layouts[lastIndex] || [];\r\n      if (cacheNodes.length) {\r\n        // pretend we came from that larger column by assigning those values as starting point\r\n        oldColumn = lastIndex;\r\n        cacheNodes.forEach(cacheNode => {\r\n          let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n          if (j !== -1) {\r\n            // still current, use cache info positions\r\n            nodes[j].x = cacheNode.x;\r\n            nodes[j].y = cacheNode.y;\r\n            nodes[j].w = cacheNode.w;\r\n          }\r\n        });\r\n        cacheNodes = []; // we still don't have new column cached data... will generate from larger one.\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    let newNodes: GridStackNode[] = [];\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        nodes[j].x = cacheNode.x;\r\n        nodes[j].y = cacheNode.y;\r\n        nodes[j].w = cacheNode.w;\r\n        newNodes.push(nodes[j]);\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, oldColumn, newNodes, nodes);\r\n      } else {\r\n        let ratio = column / oldColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || oldColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    newNodes = Utils.sort(newNodes, -1, column);\r\n    this._ignoreLayoutsNodeChange = true;\r\n    this.batchUpdate();\r\n    this.nodes = []; // pretend we have no nodes to start with (we use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // force attr update\r\n    }, this);\r\n    this.commit();\r\n    delete this._ignoreLayoutsNodeChange;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._origX = n.x;\r\n      n._origY = n.y;\r\n      n._origW = n.w;\r\n      n._origH = n.h;\r\n      delete n._dirty;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: Layout[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal legacy method renames */\r\n  private getGridHeight = obsolete(this, GridStackEngine.prototype.getRow, 'getGridHeight', 'getRow', 'v1.0.0');\r\n}\r\n\r\n/** @internal class to store per column layout bare minimal info (subset of GridStackWidget) */\r\ninterface Layout {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  _id: number; // so we can find full node back\r\n}\r\n","// gridstack.ts 3.3.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { obsoleteOpts, obsoleteAttr, Utils, HeightData } from './utils';\r\nimport { GridStackElement, GridItemHTMLElement, GridStackWidget, GridStackNode, GridStackOptions, numberOrString, ColumnOptions } from './types';\r\nimport { GridStackDDI } from './gridstack-ddi';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resizestart' | 'resizestop';\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _id?: string; // random id we will use to style us\r\n  _max?: number; // internal tracker of the max # of rows we created\\\r\n}\r\n\r\n// default values for grid options - used during init and when saving out\r\nconst GridDefaults: GridStackOptions = {\r\n  column: 12,\r\n  minRow: 0,\r\n  maxRow: 0,\r\n  itemClass: 'grid-stack-item',\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  handle: '.grid-stack-item-content',\r\n  handleClass: null,\r\n  styleInHead: false,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  margin: 10,\r\n  auto: true,\r\n  minWidth: 768,\r\n  float: false,\r\n  staticGrid: false,\r\n  animate: true,\r\n  alwaysShowResizeHandle: false,\r\n  resizable: {\r\n    autoHide: true,\r\n    handles: 'se'\r\n  },\r\n  draggable: {\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  dragIn: undefined,\r\n  dragInOptions : {\r\n    revert: 'invalid',\r\n    handle: '.grid-stack-item-content',\r\n    scroll: false,\r\n    appendTo: 'body'\r\n  },\r\n  disableDrag: false,\r\n  disableResize: false,\r\n  rtl: 'auto',\r\n  removable: false,\r\n  removableOptions: {\r\n    accept: '.grid-stack-item'\r\n  },\r\n  removeTimeout: 2000,\r\n  marginUnit: 'px',\r\n  cellHeightUnit: 'px',\r\n  disableOneColumnMode: false,\r\n  oneColumnModeDomSort: false\r\n};\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, {...options});\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, {...options});\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element\r\n    let doc = document.implementation.createHTMLDocument();\r\n    doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n    let el = doc.body.children[0] as HTMLElement;\r\n    parent.append(el);\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (opt.children) {\r\n      grid.load(opt.children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, GridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  private _placeholder: HTMLElement;\r\n  /** @internal */\r\n  private _oneColumnMode: boolean;\r\n  /** @internal */\r\n  private _prevColumn: number;\r\n  /** @internal */\r\n  private _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  private _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  private _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  private _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  private _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  private _insertNotAppend: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    obsoleteOpts(opts, 'verticalMargin', 'margin', 'v2.0');\r\n\r\n    obsoleteAttr(this.el, 'data-gs-current-height', 'gs-current-row', 'v1.0.0');\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // elements attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...GridDefaults,\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || 12,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || 0,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || 0,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || false,\r\n      _styleSheetClass: 'grid-stack-instance-' + (Math.random() * 10000).toFixed(0),\r\n      alwaysShowResizeHandle: opts.alwaysShowResizeHandle || false,\r\n      resizable: {\r\n        autoHide: !(opts.alwaysShowResizeHandle || false),\r\n        handles: 'se'\r\n      },\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || '.grid-stack-item-content',\r\n        scroll: false,\r\n        appendTo: 'body'\r\n      },\r\n      removableOptions: {\r\n        accept: '.' + (opts.itemClass || 'grid-stack-item')\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this.initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.minWidth) {\r\n      this._prevColumn = this.opts.column;\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItemEl = Utils.closestByClass(this.el, GridDefaults.itemClass) as GridItemHTMLElement;\r\n    if (parentGridItemEl && parentGridItemEl.gridstackNode) {\r\n      this.opts._isNested = parentGridItemEl.gridstackNode;\r\n      this.opts._isNested.subGrid = this;\r\n      this.el.classList.add('grid-stack-nested');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    this.el.classList.add(this.opts._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    this.engine = new GridStackEngine({\r\n      column: this.opts.column,\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes, removeDOM = true) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (removeDOM && n._id === null) {\r\n            if (el && el.parentNode) { el.parentNode.removeChild(el) }\r\n          } else {\r\n            this._writePosAttr(el, n.x, n.y, n.w, n.h);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      this.getGridItems().forEach(el => {\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * this.opts.column\r\n        });\r\n      });\r\n      elements.sort(e => e.i).forEach(e => this._prepareElement(e.el));\r\n      this.commit();\r\n    }\r\n    this.engine.saveInitial(); // initial start of items\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    this._setupDragIn();\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `addWidget(el, x, y, width...)` is deprecated. Use `addWidget({x, y, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1,\r\n        opt: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++],\r\n          minW:a[i++], maxW:a[i++], minH:a[i++], maxH:a[i++], id:a[i++] };\r\n      return this.addWidget(els, opt);\r\n    }\r\n\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument();\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = {...(options || {})};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization (with default to save content), which might include any nested grids.\r\n   * Optionally you can also save the grid with options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list.\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content as well\r\n    if (saveContent) {\r\n      list.forEach(n => {\r\n        if (n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n          let sub = n.el.querySelector('.grid-stack-item-content');\r\n          n.content = sub ? sub.innerHTML : undefined;\r\n          if (!n.content) delete n.content;\r\n          delete n.el;\r\n        }\r\n      });\r\n    }\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n\r\n      // check for nested grid\r\n      list.forEach(n => {\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, saveGridOpt) as GridStackOptions;\r\n        }\r\n      })\r\n\r\n      let o: GridStackOptions = {...this.opts};\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) { o.cellHeight = 'auto' }\r\n      Utils.removeInternalAndSame(o, GridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | ((g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement)  = true): GridStack {\r\n    let items = GridStack.Utils.sort(layout, -1, this._prevColumn || this.opts.column);\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n        if (w.subGrid) { // see if there is a sub-grid to create too\r\n          let content = w.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n          w.subGrid = GridStack.addGrid(content, w.subGrid as GridStackOptions);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.commit();\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initializes batch updates. You will see no changes until `commit()` method is called.\r\n   */\r\n  public batchUpdate(): GridStack {\r\n    this.engine.batchUpdate();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    // or do entire grid and # of rows ? (this.el.getBoundingClientRect().height) / parseInt(this.el.getAttribute('gs-current-row'))\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n    return Math.round(el.offsetHeight / height);\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true, this.getRow()); // true = force re-create, for that # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.opts.column;\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  private _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * Finishes batch updates. Updates DOM nodes. You must call it after batchUpdate.\r\n   */\r\n  public commit(): GridStack {\r\n    this.engine.commit();\r\n    this._triggerRemoveEvent();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (this.opts.column === column) return this;\r\n    let oldColumn = this.opts.column;\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => {\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true); // permanently removes DD\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this.opts._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    delete this.opts._isNested;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    this.engine.float = val;\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos;\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.opts.column);\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  public on(name: GridStackEvent, callback: (event: Event, arg2?: GridItemHTMLElement | GridStackNode[]) => void): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      GridStackDDI.get().remove(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      GridStackDDI.get().remove(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete Drag&drop or initialize it\r\n    this._setStaticClass();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update({x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = {...opt}; // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes();\r\n        this.engine.beginUpdate(n);\r\n        this.engine.moveNode(n, m.x, m.y, m.w, m.h);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this.initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _triggerEvent(name: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(name, {bubbles: false, detail: data}) : new Event(name);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  private _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styles._id);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  private _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this.opts._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      let id = 'gridstack-style-' + (Math.random() * 100000).toFixed();\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(id, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._id = id;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this.opts._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,        `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow(); // checks for minRow already\r\n    // check for css min height\r\n    let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    if (cssMinHeight > 0) {\r\n      let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n      if (row < minRow) {\r\n        row = minRow;\r\n      }\r\n    }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.height = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  private _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write x,y,w,h attributes back to element */\r\n  private _writePosAttr(el: HTMLElement, x?: number, y?: number, w?: number, h?: number): GridStack {\r\n    if (x !== undefined && x !== null) { el.setAttribute('gs-x', String(x)); }\r\n    if (y !== undefined && y !== null) { el.setAttribute('gs-y', String(y)); }\r\n    if (w) { el.setAttribute('gs-w', String(w)); }\r\n    if (h) { el.setAttribute('gs-h', String(h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  private _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node.x, node.y, node.w, node.h);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  private _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  private _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.minWidth;\r\n    let changedOneColumn = false;\r\n\r\n    if (!this._oneColumnMode !== !oneColumn) { // use ! (negate) so we can check undefined == false vs true\r\n      this._oneColumnMode = oneColumn;\r\n      changedOneColumn = true;\r\n      if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n      this.column(oneColumn ? 1 : this._prevColumn);\r\n      if (this.opts.animate) { this.setAnimation(true); }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedOneColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed to/from oneColumn or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  private _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.opts._isNested;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  private initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in gridstack-dd.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * Enables/Disables moving. No-op for static grids.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables resizing. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   *\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableDrag grid option (default: true).\r\n   */\r\n  public enableMove(doEnable: boolean, includeNewWidgets = true): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param doEnable\r\n   * @param includeNewWidgets will force new widgets to be draggable as per\r\n   * doEnable`s value by changing the disableResize grid option (default: true).\r\n   */\r\n  public enableResize(doEnable: boolean, includeNewWidgets = true): GridStack {  return this }\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal */\r\n  public _setupRemovingTimeout(el: GridItemHTMLElement): GridStack { return this }\r\n  /** @internal */\r\n  public _clearRemovingTimeout(el: GridItemHTMLElement): GridStack { return this }\r\n  /** @internal call to setup dragging in from the outside (say toolbar), with options */\r\n  public _setupDragIn():  GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n\r\n  // 2.x API that just calls the new and better update() - keep those around for backward compat only...\r\n  /** @internal */\r\n  public locked(els: GridStackElement, locked: boolean): GridStack { return this.update(els, {locked}) }\r\n  /** @internal */\r\n  public maxWidth(els: GridStackElement, maxW: number): GridStack { return this.update(els, {maxW}) }\r\n  /** @internal */\r\n  public minWidth(els: GridStackElement, minW: number): GridStack {  return this.update(els, {minW}) }\r\n  /** @internal */\r\n  public maxHeight(els: GridStackElement, maxH: number): GridStack { return this.update(els, {maxH}) }\r\n  /** @internal */\r\n  public minHeight(els: GridStackElement, minH: number): GridStack { return this.update(els, {minH}) }\r\n  /** @internal */\r\n  public move(els: GridStackElement, x?: number, y?: number): GridStack { return this.update(els, {x, y}) }\r\n  /** @internal */\r\n  public resize(els: GridStackElement, w?: number, h?: number): GridStack { return this.update(els, {w, h}) }\r\n}\r\n","// dd-base-impl.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  private _disabled = false;\n  /** @internal */\n  private _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (this.disabled) return;\n    if (!this._eventRegister) {return; } // used when destroy before triggerEvent fire\n    if (this._eventRegister[eventName]) {\n      return this._eventRegister[eventName](event);\n    }\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","// dd-draggable.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDManager } from './dd-manager';\nimport { DDUtils } from './dd-utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from '../types';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  containment?: string | HTMLElement; // TODO: not implemented yet\n  handle?: string;\n  revert?: string | boolean | unknown; // TODO: not implemented yet\n  scroll?: boolean; // nature support by HTML5 drag drop, can't be switch to off actually\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  private dragOffset: DragOffset;\n  /** @internal */\n  private dragElementOriginStyle: Array<string>;\n  /** @internal */\n  private dragFollowTimer: number;\n  /** @internal */\n  private dragEl: HTMLElement;\n  /** @internal */\n  private dragging = false;\n  /** @internal */\n  private paintTimer: number;\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private helperContainment: HTMLElement;\n  /** @internal */\n  private static basePosition: 'fixed' | 'absolute' = 'absolute';\n  /** @internal #1541 can't have {passive: true} on Safari as otherwise it reverts animate back to old location on drop */\n  private static dragEventListenerOption = true; // DDUtils.isEventSupportPassiveOption ? { capture: true, passive: true } : true;\n  /** @internal */\n  private static originStyleProp = ['transition', 'pointerEvents', 'position',\n    'left', 'top', 'opacity', 'zIndex', 'width', 'height', 'willChange'];\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragStart = this._dragStart.bind(this);\n    this._drag = this._drag.bind(this);\n    this._dragEnd = this._dragEnd.bind(this);\n    this._dragFollow = this._dragFollow.bind(this);\n    this.enable();\n  }\n\n  public on(event: 'drag' | 'dragstart' | 'dragstop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drag' | 'dragstart' | 'dragstop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.dragEl.draggable = true;\n    this.dragEl.addEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    super.disable();\n    this.dragEl.removeAttribute('draggable');\n    this.dragEl.removeEventListener('dragstart', this._dragStart);\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragging) {\n      // Destroy while dragging should remove dragend listener and manually trigger\n      // dragend, otherwise dragEnd can't perform dragstop because eventRegistry is\n      // destroyed.\n      this._dragEnd({} as DragEvent);\n    }\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal */\n  private _dragStart(event: DragEvent): void {\n    DDManager.dragElement = this;\n    this.helper = this._createHelper(event);\n    this._setupHelperContainmentStyle();\n    this.dragOffset = this._getDragOffset(event, this.el, this.helperContainment);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstart' });\n    if (this.helper !== this.el) {\n      this._setupDragFollowNodeNotifyStart(ev);\n    } else {\n      this.dragFollowTimer = window.setTimeout(() => {\n        delete this.dragFollowTimer;\n        this._setupDragFollowNodeNotifyStart(ev);\n      }, 0);\n    }\n    this._cancelDragGhost(event);\n  }\n\n  /** @internal */\n  private _setupDragFollowNodeNotifyStart(ev: Event): DDDraggable {\n    this._setupHelperStyle();\n    document.addEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n    this.dragEl.addEventListener('dragend', this._dragEnd);\n    if (this.option.start) {\n      this.option.start(ev, this.ui());\n    }\n    this.dragging = true;\n    this.helper.classList.add('ui-draggable-dragging');\n    this.triggerEvent('dragstart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _drag(event: DragEvent): void {\n    // Safari: prevent default to allow drop to happen instead of reverting back (with animation) and delaying dragend #1541\n    // https://stackoverflow.com/questions/61760755/how-to-fire-dragend-event-immediately\n    event.preventDefault();\n    this._dragFollow(event);\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal */\n  private _dragEnd(event: DragEvent): void {\n    if (this.dragFollowTimer) {\n      clearTimeout(this.dragFollowTimer);\n      delete this.dragFollowTimer;\n      return;\n    } else {\n      if (this.paintTimer) {\n        cancelAnimationFrame(this.paintTimer);\n      }\n      document.removeEventListener('dragover', this._drag, DDDraggable.dragEventListenerOption);\n      this.dragEl.removeEventListener('dragend', this._dragEnd);\n    }\n    this.dragging = false;\n    this.helper.classList.remove('ui-draggable-dragging');\n    this.helperContainment.style.position = this.parentOriginStylePosition || null;\n    if (this.helper === this.el) {\n      this._removeHelperStyle();\n    } else {\n      this.helper.remove();\n    }\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dragstop' });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.triggerEvent('dragstop', ev);\n    delete DDManager.dragElement;\n    delete this.helper;\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  private _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper.apply(this.el, event);\n    } else if (this.option.helper === 'clone') {\n      helper = DDUtils.clone(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      DDUtils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal */\n  private _setupHelperStyle(): DDDraggable {\n    this.helper.style.pointerEvents = 'none';\n    this.helper.style.width = this.dragOffset.width + 'px';\n    this.helper.style.height = this.dragOffset.height + 'px';\n    this.helper.style.willChange = 'left, top';\n    this.helper.style.transition = 'none'; // show up instantly\n    this.helper.style.position = this.option.basePosition || DDDraggable.basePosition;\n    this.helper.style.zIndex = '1000';\n    setTimeout(() => {\n      if (this.helper) {\n        this.helper.style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal */\n  private _removeHelperStyle(): DDDraggable {\n    // don't bother restoring styles if we're gonna remove anyway...\n    let node = this.helper ? (this.helper as GridItemHTMLElement).gridstackNode : undefined;\n    if (!node || !node._isAboutToRemove) {\n      DDDraggable.originStyleProp.forEach(prop => {\n        this.helper.style[prop] = this.dragElementOriginStyle[prop] || null;\n      });\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal */\n  private _dragFollow(event: DragEvent): void {\n    if (this.paintTimer) {\n      cancelAnimationFrame(this.paintTimer);\n    }\n    this.paintTimer = requestAnimationFrame(() => {\n      delete this.paintTimer;\n      const offset = this.dragOffset;\n      let containmentRect = { left: 0, top: 0 };\n      if (this.helper.style.position === 'absolute') {\n        const { left, top } = this.helperContainment.getBoundingClientRect();\n        containmentRect = { left, top };\n      }\n      this.helper.style.left = event.clientX + offset.offsetLeft - containmentRect.left + 'px';\n      this.helper.style.top = event.clientY + offset.offsetTop - containmentRect.top + 'px';\n    });\n  }\n\n  /** @internal */\n  private _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.option.basePosition !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal prevent the default gost image to be created (which has wrongas we move the helper/element instead\n   * (legacy jquery UI code updates the top/left of the item).\n   * TODO: maybe use mouse event instead of HTML5 drag as we have to work around it anyway, or change code to not update\n   * the actual grid-item but move the gost image around (and special case jq version) ?\n   **/\n  private _cancelDragGhost(e: DragEvent): DDDraggable {\n    /* doesn't seem to do anything...\n    let t = e.dataTransfer;\n    t.effectAllowed = 'none';\n    t.dropEffect = 'none';\n    t.setData('text', '');\n    */\n\n    // NOTE: according to spec (and required by Safari see #1540) the image has to be visible in the browser (in dom and not hidden) so make it a 1px div\n    let img = document.createElement('div');\n    img.style.width = '1px';\n    img.style.height = '1px';\n    document.body.appendChild(img);\n    e.dataTransfer.setDragImage(img, 0, 0);\n    setTimeout(() => document.body.removeChild(img)); // nuke once drag had a chance to grab this 'image'\n\n    e.stopPropagation();\n    return this;\n  }\n\n  /** @internal */\n  private _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      DDUtils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n\n\n","// dd-droppable.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  /** @internal */\n  private moving: boolean;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._dragEnter = this._dragEnter.bind(this);\n    this._dragOver = this._dragOver.bind(this);\n    this._dragLeave = this._dragLeave.bind(this);\n    this._drop = this._drop.bind(this);\n\n    this.el.classList.add('ui-droppable');\n    this.el.addEventListener('dragenter', this._dragEnter);\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (!this.disabled) return;\n    super.enable();\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('dragenter', this._dragEnter);\n  }\n\n  public disable(forDestroy=false): void {\n    if (this.disabled) return;\n    super.disable();\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('dragenter', this._dragEnter);\n  }\n\n  public destroy(): void {\n    if (this.moving) {\n      this._removeLeaveCallbacks();\n    } \n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    delete this.moving;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  private _dragEnter(event: DragEvent): void {\n    if (!this._canDrop()) return;\n    this.moving = true;\n\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.addEventListener('dragover', this._dragOver);\n    this.el.addEventListener('drop', this._drop);\n    this.el.addEventListener('dragleave', this._dragLeave);\n    this.el.classList.add('ui-droppable-over');\n  }\n\n  /** @internal called when an moving to drop item is being dragged over - do nothing but eat the event */\n  private _dragOver(event: DragEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  private _dragLeave(event: DragEvent): void {\n    if (this.el.contains(event.relatedTarget as HTMLElement)) return;\n    this._removeLeaveCallbacks();\n    if (this.moving) {\n      event.preventDefault();\n      const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'dropout' });\n      if (this.option.out) {\n        this.option.out(ev, this._ui(DDManager.dragElement))\n      }\n      this.triggerEvent('dropout', ev);\n    }\n  }\n\n  /** @internal item is being dropped on us - call the client drop event */\n  private _drop(event: DragEvent): void {\n    if (!this.moving) return; // should not have received event...\n    event.preventDefault();\n    const ev = DDUtils.initEvent<DragEvent>(event, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n    this._removeLeaveCallbacks();\n  }\n\n  /** @internal called to remove callbacks when leaving or dropping */\n  private _removeLeaveCallbacks() {\n    this.el.removeEventListener('dragleave', this._dragLeave);\n    this.el.classList.remove('ui-droppable-over');\n    if (this.moving) {\n      this.el.removeEventListener('dragover', this._dragOver);\n      this.el.removeEventListener('drop', this._drop);\n    }\n  }\n\n  /** @internal */\n  private _canDrop(): boolean {\n    return DDManager.dragElement && (!this.accept || this.accept(DDManager.dragElement.el));\n  }\n\n  /** @internal */\n  private _setupAccept(): DDDroppable {\n    if (this.option.accept && typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => {\n        return el.matches(this.option.accept as string)\n      }\n    } else {\n      this.accept = this.option.accept as ((el: HTMLElement) => boolean);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","// dd-elements.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './../types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","// dd-manager.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDDraggable } from './dd-draggable';\n\nexport class DDManager {\n  static dragElement: DDDraggable;\n}\n","// dd-resizable-handle.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  private el: HTMLElement;\n  /** @internal */\n  private host: HTMLElement;\n  /** @internal */\n  private option: DDResizableHandleOpt;\n  /** @internal */\n  private dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  private moving = false;\n  /** @internal */\n  private mouseDownEvent: MouseEvent;\n  /** @internal */\n  private static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  private _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  private _mouseDown(e: MouseEvent): void {\n    e.preventDefault();\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp);\n  }\n\n  /** @internal */\n  private _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    // don't start unless we've moved at least 3 pixels\n    if (!this.moving && Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n    } else if (this.moving) {\n      this._triggerEvent('move', e);\n    }\n  }\n\n  /** @internal */\n  private _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp);\n    delete this.moving;\n    delete this.mouseDownEvent;\n  }\n\n  /** @internal */\n  private _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","// dd-resizable.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { DDUtils } from './dd-utils';\nimport { Utils } from '../utils';\nimport { DDUIData, Rect, Size } from '../types';\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  basePosition?: 'fixed' | 'absolute';\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  private handlers: DDResizableHandle[];\n  /** @internal */\n  private originalRect: Rect;\n  /** @internal */\n  private temporalRect: Rect;\n  /** @internal */\n  private scrollY: number;\n  /** @internal */\n  private scrolled: number;\n  /** @internal */\n  private scrollEl: HTMLElement;\n  /** @internal */\n  private startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  private elOriginStyleVal: string[];\n  /** @internal */\n  private parentOriginStylePosition: string;\n  /** @internal */\n  private static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    this.enable();\n    this._setupAutoHide();\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    if (this.option.autoHide) {\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide();\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _setupAutoHide(): DDResizable {\n    if (this.option.autoHide) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover/mouseout instead of mouseenter/mouseleave to get better performance;\n      this.el.addEventListener('mouseover', this._showHandlers);\n      this.el.addEventListener('mouseout', this._hideHandlers);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._showHandlers);\n      this.el.removeEventListener('mouseout', this._hideHandlers);\n    }\n    return this;\n  }\n\n  /** @internal */\n  private _showHandlers = () => {\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _hideHandlers = () => {\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  private _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollParent(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  private _resizeStop(event: MouseEvent): DDResizable {\n    const ev = DDUtils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  private _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = this.option.basePosition || 'absolute'; // or 'fixed'\n    this.el.style.opacity = '0.8';\n    this.el.style.zIndex = '1000';\n    return this;\n  }\n\n  /** @internal */\n  private _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  private _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    \n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += event.clientX - oEvent.clientX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += event.clientY - oEvent.clientY;\n    }\n    if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const reshape = this._getReShapeSize(newRect.width, newRect.height);\n    if (newRect.width !== reshape.width) {\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - reshape.width;\n      }\n      newRect.width = reshape.width;\n    }\n    if (newRect.height !== reshape.height) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - reshape.height;\n      }\n      newRect.height = reshape.height;\n    }\n    return newRect;\n  }\n\n  /** @internal */\n  private _getReShapeSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  private _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  private _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  private _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","// dd-utils.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\n\nexport class DDUtils {\n\n  public static isEventSupportPassiveOption = ((() => {\n    let supportsPassive = false;\n    let passiveTest = () => {\n      // do nothing\n    };\n    document.addEventListener('test', passiveTest, {\n      get passive() {\n        supportsPassive = true;\n        return true;\n      }\n    });\n    document.removeEventListener('test', passiveTest);\n    return supportsPassive;\n  })());\n\n  public static clone(el: HTMLElement): HTMLElement {\n    const node = el.cloneNode(true) as HTMLElement;\n    node.removeAttribute('id');\n    return node;\n  }\n\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\n    let parentNode: HTMLElement;\n    if (typeof parent === 'string') {\n      parentNode = document.querySelector(parent as string);\n    } else {\n      parentNode = parent as HTMLElement;\n    }\n    if (parentNode) {\n      parentNode.append(el);\n    }\n  }\n\n  public static setPositionRelative(el: HTMLElement): void {\n    if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\n      el.style.position = \"relative\";\n    }\n  }\n\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\n    if (styles instanceof Object) {\n      for (const s in styles) {\n        if (styles.hasOwnProperty(s)) {\n          if (Array.isArray(styles[s])) {\n            // support fallback value\n            (styles[s] as string[]).forEach(val => {\n              el.style[s] = val;\n            });\n          } else {\n            el.style[s] = styles[s];\n          }\n        }\n      }\n    }\n  }\n\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\n    const evt = { type: info.type };\n    const obj = {\n      button: 0,\n      which: 0,\n      buttons: 1,\n      bubbles: true,\n      cancelable: true,\n      target: info.target ? info.target : e.target\n    };\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n    if ((e as DragEvent).dataTransfer) {\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\n    }\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\n    return {...evt, ...obj} as unknown as T;\n  }\n}","// gridstack-dd-native.ts 3.3.0 @preserve\n\n/**\n * https://gridstackjs.com/\n * (c) 2020 rhlin, Alain Dumesny\n * gridstack.js may be freely distributed under the MIT license.\n*/\nimport { DDManager } from './dd-manager';\nimport { DDElement, DDElementHost } from './dd-element';\n\nimport { GridStackElement } from '../gridstack';\nimport { GridStackDD, DDOpts, DDKey, DDDropOpt, DDCallback, DDValue } from '../gridstack-dd';\nimport { GridItemHTMLElement, DDDragInOpt } from '../types';\nimport { Utils } from '../utils';\n\n// export our base class (what user should use) and all associated types\nexport * from '../gridstack-dd';\n\n/**\n * HTML 5 Native DragDrop based drag'n'drop plugin.\n */\nexport class GridStackDDNative extends GridStackDD {\n\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        dEl.setupResizable({\n          ...grid.opts.resizable,\n          ...{ handles: handles },\n          ...{\n            start: opts.start,\n            stop: opts.stop,\n            resize: opts.resize\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({ [key]: value });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable({\n          ...grid.opts.draggable,\n          ...{\n            containment: (grid.opts._isNested && !grid.opts.dragOut)\n              ? grid.el.parentElement\n              : (grid.opts.draggable.containment || null),\n            start: opts.start,\n            stop: opts.stop,\n            drag: opts.drag\n          }\n        });\n      }\n    });\n    return this;\n  }\n\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): GridStackDDNative {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = (el) => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) { // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({ [key]: value });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n\n  /** true if element is droppable */\n  public isDroppable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled;\n  }\n\n  /** true if element is draggable */\n  public isDraggable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled;\n  }\n\n  /** true if element is draggable */\n  public isResizable(el: DDElementHost): boolean {\n    return el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled;\n  }\n\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): GridStackDDNative {\n    this._getDDElements(el).forEach(dEl =>\n      dEl.on(name, (event: Event) => {\n        callback(\n          event,\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\n      })\n    );\n    return this;\n  }\n\n  public off(el: GridItemHTMLElement, name: string): GridStackDD {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  private _getDDElements(els: GridStackElement, create = true): DDElement[] {\n    let hosts = Utils.getElements(els) as DDElementHost[];\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n    if (!create) { list.filter(d => d); } // remove nulls\n    return list;\n  }\n}\n\n// finally register ourself\nGridStackDD.registerPlugin(GridStackDDNative);\n","// index.html5.ts 3.3.0 - everything you need for a Grid that uses HTML5 native drag&drop (work in progress) @preserve\r\n\r\n// import './gridstack-poly.js';\r\n\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './gridstack-ddi';\r\nexport * from './gridstack';\r\n\r\nexport * from './h5/gridstack-dd-native';\r\n\r\n// declare module 'gridstack'; for umd ?\r\n","// utils.ts 3.3.0 @preserve\r\n\r\n/**\r\n * https://gridstackjs.com/\r\n * (c) 2014-2020 Alain Dumesny, Dylan Weiss, Pavel Reznikov\r\n * gridstack.js may be freely distributed under the MIT license.\r\n*/\r\n\r\nimport { GridStackElement, GridStackWidget, GridStackNode, GridStackOptions, numberOrString } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **completely** removed in v1.0');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **completely** removed in v1.0');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackWidget, b: GridStackWidget): boolean {\r\n    return !(a.x + a.w <= b.x || b.x + b.w <= a.x || a.y + a.h <= b.y || b.y + b.h <= a.y);\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    if (!column) {\r\n      let widths = nodes.map(n => n.x + n.w);\r\n      column = Math.max(...widths);\r\n    }\r\n\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (val && typeof val === 'object') {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      } else if (val === b[key] || key[0] === '_') { delete a[key] }\r\n    }\r\n  }\r\n\r\n  /** return the closest parent matching the given class */\r\n  static closestByClass(el: HTMLElement, name: string): HTMLElement {\r\n\r\n    while(el = el.parentElement) {\r\n      if (el.classList.contains(name)) return el;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static getScrollParent(el: HTMLElement): HTMLElement {\r\n    if (el === null) return document.documentElement;\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollParent(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollParent(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollParent(el);\r\n    const height = scrollEl.clientHeight;\r\n\r\n    const top = event.clientY < distance;\r\n    const bottom = event.clientY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: event.clientY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - event.clientY)});\r\n    }\r\n  }\r\n}\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(117);\n"],"sourceRoot":""}